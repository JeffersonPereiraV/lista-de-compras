// Mocks generated by Mockito 5.4.6 from annotations
// in soft_list/test/blocs/user_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:soft_list/models/topic.dart' as _i5;
import 'package:soft_list/models/user.dart' as _i2;
import 'package:soft_list/repositories/storage_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [StorageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageRepository extends _i1.Mock implements _i3.StorageRepository {
  MockStorageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Topic>> loadTopics() =>
      (super.noSuchMethod(
            Invocation.method(#loadTopics, []),
            returnValue: _i4.Future<List<_i5.Topic>>.value(<_i5.Topic>[]),
          )
          as _i4.Future<List<_i5.Topic>>);

  @override
  _i4.Future<void> saveTopics(List<_i5.Topic>? topics) =>
      (super.noSuchMethod(
            Invocation.method(#saveTopics, [topics]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.User> loadUser() =>
      (super.noSuchMethod(
            Invocation.method(#loadUser, []),
            returnValue: _i4.Future<_i2.User>.value(
              _FakeUser_0(this, Invocation.method(#loadUser, [])),
            ),
          )
          as _i4.Future<_i2.User>);

  @override
  _i4.Future<void> saveUser(_i2.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
